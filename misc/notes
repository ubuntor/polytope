nelder-mead

consider combining functions
f:R^2 -> R, g:R^2 -> R
as h(x,y,z,w) = f(x,y) + g(z,w)
to get more dimensions

subdivide simplex and transform?
    loop subdivision???
or just convex hull of projection then subdivide (or convex hull of subdivisions of tetrahedra)
ooh http://www.immagery.com/pdf/cage_based_def_methods.pdf

orchestral samples?

while True:
    sort vertices by value
    reflect/expand/contract worst vertex
    shrink if no candidate vertex found

[expand] [reflect] [contract/shrink]
hmm https://www.webpages.uidaho.edu/~fuchang/res/ANMS.pdf

assign barycentric coordinates, then use as transform!
    might need to precalculate

ddr-esque animation on hit (white glow, expand)
"judgement markers":
    (bad) +[points]...
    (normal) +[points]
    (almost perfect) +[points]!
    (perfect) +[points]! in rainbow

Himmelblau
Cross-in-tray
McCormick
Schaffer N. 4
Styblinski-Tang

Expand.
Reflect.
Contract.
Find convergence.

\alpha \coloneqq 1\\
\beta \coloneqq 1 + \frac{2}{n}\\
\gamma \coloneqq 0.75 - \frac{1}{2n}\\
\delta \coloneqq 1 - \frac{1}{n}\\
f(x_1) \le \dotsb \le f(x_{n+1})\\
\overline{x} \coloneqq \frac{1}{n} \sum_{i=1}^n x_i\\

x_r = xbar + alpha*(xbar - x_{n+1})
if f(x_1) <= f(x_r) < f(x_n):
    replace x_{n+1} with x_r [REFLECT]
else if f(x_r) < f(x_1):
    x_e = xbar + beta*(x_r - xbar)
    if f(x_e) < f(x_r):
        replace x_{n+1} with x_e [EXPAND]
    else:
        replace x_{n+1} with x_r [REFLECT]
else if f(x_n) <= f(x_r) < f(x_{n+1}):
    x_oc = xbar + gamma*(x_r - xbar)
    if f(x_oc) <= f(x_r):
        replace x_{n+1} with x_oc [CONTRACT (OUTSIDE)]
    else:
        for 2 <= i <= n+1:
            replace x_i with x_1 + delta*(x_i - x_1) [SHRINK]
else:
    x_ic = xbar - gamma*(x_r - xbar)
    if f(x_ic) < f(x_r):
        replace x_{n+1} with x_ic [CONTRACT (INSIDE)]
    else:
        for 2 <= i <= n+1:
            replace x_i with x_1 + delta*(x_i - x_1) [SHRINK]

no more expand after a while...
maybe define f(x,t) = f(x) + epsilon_t [explore an ever-changing landscape]
epsilon_t is random noise dependent on t
at max intensity, freeze t and make each freestyle move 20x as powerful for rapid convergence?

waveform visualizer in background?

keep track of combo?

credits:
Wikipedia article on Nelder-Mead: https://en.wikipedia.org/wiki/Nelder%E2%80%93Mead_method
https://heraldod.itch.io/bitmap-fonts
https://tinyworlds.itch.io/free-pixel-font-thaleah
https://managore.itch.io/m3x6

things needed:
    play sound samples
    fade in and loop sound samples
    draw text
    draw lines with glow?
    draw images
    canvas scaling (image-rendering: pixelated)
    text/image particles